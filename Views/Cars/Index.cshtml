@model Phoenix.Models.CarViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    @if ((await AuthorizationService.AuthorizeAsync(User, "", "Dealer")).Succeeded)
    {
        <a asp-action="Create">Create New</a>
    }
</p>

<form asp-controller="Cars" asp-action="Index" method="get">
    <p>
        <select asp-for="CarBrand" asp-items="Model.Brands">
            <option value="">All</option>
        </select>
        <select asp-for="CarMark" asp-items="Model.Marks">
            <option value="">All</option>
        </select>

        <label>Title: <input type="text" name="SearchString" /></label>
        <input type="submit" value="Filter" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Cars![0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Cars![0].Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Cars!)
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                    @if (User.IsInRole(item.Brand) || User.IsInRole("Admin"))
                    {
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a>
                        <text> | </text>
                    }
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                    @if (User.IsInRole(item.Brand) || User.IsInRole("Admin"))
                    {
                        <text> | </text>
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                    }
            </td>
        </tr>
}
    </tbody>
</table>
